//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input Actions/PaperPlaneControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PaperPlaneControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PaperPlaneControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PaperPlaneControls"",
    ""maps"": [
        {
            ""name"": ""FlightControls"",
            ""id"": ""454ef927-d8c4-4aaf-b1ba-45d28e586fa6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4f341f61-56a2-4ac8-a15c-e2895bb068f5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""b204ba2d-3d67-40ac-9341-e629bce4a15d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Launch"",
                    ""type"": ""Button"",
                    ""id"": ""4cfec6c1-0bfc-4db3-985d-6ec278440326"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trail"",
                    ""type"": ""Button"",
                    ""id"": ""258b3d31-f047-4348-9c10-03b44e5793e9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6843e798-dada-4074-8c43-9ac980d9a38e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ac538189-a348-4ac1-ab9f-21f4362463b1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f751d073-ea7c-4c18-8e1a-2e174d976b20"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9b697c43-bf44-43bb-852a-a918a5dfa5f9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bf42e505-7486-4dd8-9c21-f922e20d615d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""19824331-0d20-4434-964e-e7f38f103b60"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""27d81ae3-7b34-4210-b635-5093ab954dea"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""17dce552-f548-4e9b-a3da-e66e5a8f1cab"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b7681668-9d57-448c-a560-cee19536c9c4"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eb3cfe5a-1b9f-4e95-a33c-ea9d123def87"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1799eafd-6b1b-49eb-8c4a-fc67fb0809bc"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""533aeb7d-44d4-434b-a926-c491efed8b9b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4afe724d-f64c-46c2-ad93-8f6da748e98f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96beda5f-8333-4686-b2e9-b6ad81b6bff4"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b90443c-6569-48f4-ac67-53530e9250fb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trail"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FlightControls
        m_FlightControls = asset.FindActionMap("FlightControls", throwIfNotFound: true);
        m_FlightControls_Move = m_FlightControls.FindAction("Move", throwIfNotFound: true);
        m_FlightControls_Boost = m_FlightControls.FindAction("Boost", throwIfNotFound: true);
        m_FlightControls_Launch = m_FlightControls.FindAction("Launch", throwIfNotFound: true);
        m_FlightControls_Trail = m_FlightControls.FindAction("Trail", throwIfNotFound: true);
    }

    ~@PaperPlaneControls()
    {
        UnityEngine.Debug.Assert(!m_FlightControls.enabled, "This will cause a leak and performance issues, PaperPlaneControls.FlightControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FlightControls
    private readonly InputActionMap m_FlightControls;
    private List<IFlightControlsActions> m_FlightControlsActionsCallbackInterfaces = new List<IFlightControlsActions>();
    private readonly InputAction m_FlightControls_Move;
    private readonly InputAction m_FlightControls_Boost;
    private readonly InputAction m_FlightControls_Launch;
    private readonly InputAction m_FlightControls_Trail;
    public struct FlightControlsActions
    {
        private @PaperPlaneControls m_Wrapper;
        public FlightControlsActions(@PaperPlaneControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_FlightControls_Move;
        public InputAction @Boost => m_Wrapper.m_FlightControls_Boost;
        public InputAction @Launch => m_Wrapper.m_FlightControls_Launch;
        public InputAction @Trail => m_Wrapper.m_FlightControls_Trail;
        public InputActionMap Get() { return m_Wrapper.m_FlightControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlightControlsActions set) { return set.Get(); }
        public void AddCallbacks(IFlightControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_FlightControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlightControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
            @Launch.started += instance.OnLaunch;
            @Launch.performed += instance.OnLaunch;
            @Launch.canceled += instance.OnLaunch;
            @Trail.started += instance.OnTrail;
            @Trail.performed += instance.OnTrail;
            @Trail.canceled += instance.OnTrail;
        }

        private void UnregisterCallbacks(IFlightControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
            @Launch.started -= instance.OnLaunch;
            @Launch.performed -= instance.OnLaunch;
            @Launch.canceled -= instance.OnLaunch;
            @Trail.started -= instance.OnTrail;
            @Trail.performed -= instance.OnTrail;
            @Trail.canceled -= instance.OnTrail;
        }

        public void RemoveCallbacks(IFlightControlsActions instance)
        {
            if (m_Wrapper.m_FlightControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlightControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_FlightControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlightControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlightControlsActions @FlightControls => new FlightControlsActions(this);
    public interface IFlightControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnLaunch(InputAction.CallbackContext context);
        void OnTrail(InputAction.CallbackContext context);
    }
}
